#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
  char name[20];
  char student_id[10];
  char department[20];
  char major[20];
  int middle_e;
  int final_e;
  int total;
}student;

student * file_read() {
  int count = 1;
  char line[20];
  student * stu = (student *)malloc(sizeof(student)*count);
  FILE * f = fopen("studentlist.txt", "rt");

  while (1) {
		fgets(line, 20, f);
		if (feof(f)) break;
    count++;
    stu = (student *)realloc(stu, sizeof(student)*count);
    strncpy((stu+count-1)->name, line, strlen(line)-1);
    fgets(line, 20, f);
    strncpy((stu+count-1)->student_id, line, strlen(line)-1);
    fgets(line, 20, f);
    strncpy((stu+count-1)->department, line, strlen(line)-1);
    fgets(line, 20, f);
    strncpy((stu+count-1)->major, line, strlen(line)-1);
    fgets(line, 20, f);
    (stu+count-1)->middle_e = atoi(line);
    fgets(line, 20, f);
    (stu+count-1)->final_e = atoi(line);
    (stu+count-1)->total = (stu+count-1)->middle_e + (stu+count-1)->final_e;
	}
	fclose(f);

  stu->total = count-1;

  return stu;
}

int sort_key() {
  int key;

  printf("---------- key 종류 ----------\n");
  printf("1. 성명\n");
  printf("2. 학번\n");
  printf("3. 총점\n");
  printf("-----------------------------\n");

  do {
    printf("\nsort에 적용할 key 종류를 선택하세요 >> ");
    scanf("%d", &key);

    if (key != 1 && key !=2 && key !=3)
      printf("sort에 적용할 key 종류를 1~3 사이의 숫자로 입력해주세요!\n");
  } while (key != 1 && key !=2 && key !=3);

  return key;
}

int sort_algorithm() {
  int algorithm;

  printf("\n----- sort algorithm 종류 -----\n");
  printf("1. Bubble sort\n");
  printf("2. Insertion sort\n");
  printf("3. Quick sort\n"); // stable 보장이 안됨
  printf("4. Merge sort\n");
  printf("--------------------------------\n");

  do {
    printf("\nsort에 적용할 algorithm 종류를 선택하세요 >> ");
    scanf("%d", &algorithm);

    if (algorithm != 1 && algorithm !=2 && algorithm !=3 && algorithm !=4)
      printf("sort에 적용할 algorithm 종류를 1~4 사이의 숫자로 입력해주세요!\n");
  } while (algorithm != 1 && algorithm !=2 && algorithm !=3 && algorithm !=4);

  return algorithm;
}

student * bubble_sort(student * student_list, int n, int key) {
  int i, j;
  student temp;

  if (key == 1) {
    for (i = 1; i < n; i++)
      for (j = 1; j < n; j++)
        if (strcmp(student_list[j].name, student_list[j+1].name) > 0) {
          temp = student_list[j];
          student_list[j] = student_list[j+1];
          student_list[j+1] = temp;
        }
  } else if (key == 2) {
    for (i = 1; i < n; i++)
      for (j = 1; j < n; j++)
        if (atoi(student_list[j].student_id) > atoi(student_list[j+1].student_id)) {
          temp = student_list[j];
          student_list[j] = student_list[j+1];
          student_list[j+1] = temp;
        }
  } else if (key == 3) {
    for (i = 1; i < n; i++)
      for (j = 1; j < n; j++)
        if (student_list[j].total > student_list[j+1].total) {
          temp = student_list[j];
          student_list[j] = student_list[j+1];
          student_list[j+1] = temp;
        }
  }

  return student_list;
}

student * insertion_sort(student * student_list, int n, int key) {
  int i, j;

  if (key == 1) {
    for (i = 2; i<= n; i++) {
      student_list[0] = student_list[i];
      for (j = i-1; strcmp(student_list[0].name, student_list[j].name) < 0; j--)
        student_list[j+1] = student_list[j];
      student_list[j+1] = student_list[0];
    }
  } else if (key == 2) {
    for (i = 2; i<= n; i++) {
      student_list[0] = student_list[i];
      for (j = i-1; atoi(student_list[0].student_id) < atoi(student_list[j].student_id); j--)
        student_list[j+1] = student_list[j];
      student_list[j+1] = student_list[0];
    }
  } else if (key == 3) {
    for (i = 2; i<= n; i++) {
      student_list[0] = student_list[i];
      for (j = i-1; student_list[0].total < student_list[j].total; j--)
        student_list[j+1] = student_list[j];
      student_list[j+1] = student_list[0];
    }
  }

  return student_list;
}

student * quick_sort(student * student_list, int left, int right, int key) {
  int i, j;

  if (key == 1) {
    if (left < right) {
      i = left;
      j = right+1;

      do {
        do i++; while(strcmp(student_list[i].name, student_list[left].name) < 0);
        do j--; while(strcmp(student_list[j].name, student_list[left].name) > 0);

        if (i < j) {
          student_list[0] = student_list[i];
          student_list[i] = student_list[j];
          student_list[j] = student_list[0];
        }
      } while(i < j);
      student_list[0] = student_list[left];
      student_list[left] = student_list[j];
      student_list[j] = student_list[0];
      student_list = quick_sort(student_list, left, j-1, 1);
      student_list = quick_sort(student_list, j+1, right, 1);
    }
  } else if (key == 2) {
    if (left < right) {
      i = left;
      j = right+1;

      do {
        do i++; while(atoi(student_list[i].student_id) < atoi(student_list[left].student_id));
        do j--; while(atoi(student_list[j].student_id) > atoi(student_list[left].student_id));

        if (i < j) {
          student_list[0] = student_list[i];
          student_list[i] = student_list[j];
          student_list[j] = student_list[0];
        }
      } while(i < j);
      student_list[0] = student_list[left];
      student_list[left] = student_list[j];
      student_list[j] = student_list[0];
      student_list = quick_sort(student_list, left, j-1, 2);
      student_list = quick_sort(student_list, j+1, right, 2);
    }
  } else if (key == 3) {
    if (left < right) {
      i = left;
      j = right+1;

      do {
        do i++; while(student_list[i].total < student_list[left].total && i<=j);
        do j--; while(student_list[j].total > student_list[left].total);

        if (i < j) {
          student_list[0] = student_list[i];
          student_list[i] = student_list[j];
          student_list[j] = student_list[0];
        }
      } while(i < j);
      student_list[0] = student_list[left];
      student_list[left] = student_list[j];
      student_list[j] = student_list[0];
      student_list = quick_sort(student_list, left, j-1, 3);
      student_list = quick_sort(student_list, j+1, right, 3);
    }
  }

  return student_list;
}

void merge(student * student_list, student * merged_studentlist, int i, int m, int n, int key) {
  int j, k, t;
  j = m+1;
  k = i;

  if (key == 1) {
    while (i <= m && j <= n) {
      if (strcmp(student_list[i].name, student_list[j].name) <= 0)
        merged_studentlist[k++] = student_list[i++];
      else
        merged_studentlist[k++] = student_list[j++];
    }
  } else if (key == 2) {
      while (i <= m && j <= n) {
        if (atoi(student_list[i].student_id) <= atoi(student_list[j].student_id))
          merged_studentlist[k++] = student_list[i++];
        else
          merged_studentlist[k++] = student_list[j++];
      }
  } else if (key == 3) {
      while (i <= m && j <= n) {
        if (student_list[i].total <= student_list[j].total)
          merged_studentlist[k++] = student_list[i++];
        else
          merged_studentlist[k++] = student_list[j++];
      }
  }

  if (i > m)
    for (t = j; t <= n; t++)
      merged_studentlist[t] = student_list[t];
    else
      for (t = i; t <= m; t++)
        merged_studentlist[k+t-i] = student_list[t];
}


void merge_line(student * student_list, student * merged_studentlist, int n, int s, int key) {
  int i, j;

  for (i = 1; i< n - 2*s + 1; i+= 2*s)
    merge(student_list, merged_studentlist, i, i+s-1, i+2*s-1, key);
  if (i+s-1 < n)
    merge(student_list, merged_studentlist, i, i+s-1, n, key);
  else
    for (j = i; j <= n; j++)
      merged_studentlist[j] = student_list[j];
}

student * merge_sort(student * student_list, int n, int key) {
  int size = 1;
  student * merged_studentlist = (student *)malloc(sizeof(student)*(n+1));

  while (size < n) {
    merge_line(student_list, merged_studentlist, n, size, key);
    size *= 2;
    merge_line(merged_studentlist, student_list, n, size, key);
    size *= 2;
  }

   return merged_studentlist;
}

student * sorting(student * student_list, int n, int key, int algorithm) {
  if (algorithm == 1)
    student_list = bubble_sort(student_list, n, key);
  else if(algorithm == 2)
    student_list = insertion_sort(student_list, n, key);
  else if (algorithm == 3)
    student_list = quick_sort(student_list, 1, n, key);
  else if (algorithm == 4)
    student_list = merge_sort(student_list, n, key);

  return student_list;
}

void print_result(student * student_list, int n, int key, int algorithm) {
  int i;

  if (algorithm == 1)
    if (key == 1)
      printf("\n------------ Bubble sort를 사용해 성명을 sort한 결과 입니다 ------------\n");
    else if (key == 2)
      printf("\n------------ Bubble sort를 사용해 학번을 sort한 결과 입니다 -----------\n");
    else
      printf("\n------------ Bubble sort를 사용해 총점을 sort한 결과 입니다 ------------\n");
  else if (algorithm == 2)
    if (key == 1)
      printf("\n---------- Insertion sort를 사용해 성명을 sort한 결과 입니다 ----------\n");
    else if (key == 2)
      printf("\n---------- Insertion sort를 사용해 학번을 sort한 결과 입니다 ----------\n");
    else
      printf("\n---------- Insertion sort를 사용해 총점을 sort한 결과 입니다 ----------\n");
  else if (algorithm == 3)
    if (key == 1)
      printf("\n------------ Quick sort를 사용해 성명을 sort한 결과 입니다 ------------\n");
    else if (key == 2)
      printf("\n------------ Quick sort를 사용해 학번을 sort한 결과 입니다 ------------\n");
    else
      printf("\n------------ Quick sort를 사용해 총점을 sort한 결과 입니다 ------------\n");
  else
    if (key == 1)
      printf("\n------------ Merge sort를 사용해 성명을 sort한 결과 입니다 ------------\n");
    else if (key == 2)
      printf("\n------------ Merge sort를 사용해 학번을 sort한 결과 입니다 ------------\n");
    else
      printf("\n------------ Merge sort를 사용해 총점을 sort한 결과 입니다 ------------\n");

  printf("\n 성 명     학 번      학 부     전 공      중간      기말      총점    \n\n");
	for (i = 1; i <= n; i++) {
    printf(" %s  ", student_list[i].name);
    printf(" %s  ", student_list[i].student_id);
    printf(" %s  ", student_list[i].department);
    printf(" %s", student_list[i].major);
    printf(" %6d  ", student_list[i].middle_e);
		printf(" %6d  ", student_list[i].final_e);
    printf(" %6d  \n", student_list[i].total);
	}
	printf("\n------------------------------------------------------------------\n");
}

int main() {
  int key, algorithm;
  int count;
  student * student_list;

  student_list = file_read();
  count = student_list->total;
  key = sort_key();
  algorithm = sort_algorithm();
  student_list = sorting(student_list, count, key, algorithm);
  print_result(student_list, count, key, algorithm);

  return 0;
}
